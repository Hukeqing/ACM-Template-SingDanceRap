int a[105][100];

void catalan(){
    a[2][0] = 1;
    a[2][1] = 2;
    a[1][0] = 1;
    a[1][1] = 1;
    int len = 1, yu;
    for(int i = 3; i < 101; i++){
        yu = 0;
        for(int j = 1; j <= len; j++){
            int t = (a[i-1][j]) * (4 * i - 2) + yu;
            yu = t/10;
            a[i][j] = t % 10;
        }
        while(yu){
            a[i][++len] = yu % 10;
            yu /= 10;
        }
        for(int j = len; j >= 1; j--){
            int t = a[i][j] + yu * 10;
            a[i][j] = t / (i + 1);
            yu = t % (i + 1);
        }
        while(!a[i][len]){
            len--;
        }
        a[i][0] = len;
    }
}

int main(void){
    catalan();
    int n;
    while(cin >> n){
        if(n == -1){
            break;
        }
        for(int i = a[n][0]; i > 0; i--){
            cout << a[n][i];
        }
        cout << endl;
    }
}
//解决的问题
//1.Cn可以表示长度为2n的Dyck Words的种类数，Dyck Words由n个A字符与n个B字符组成，且满足在任意位置上，前缀中A的数量不小于B的数量，如果A用(代替，把B用)代替，就是一个典型的括号表达式，因此也可以用来表示合法的表达式个数。
//2.Cn可以表示有n个结点的不同构的二叉树的种类数。
//3.Cn可以表示有2n + 1个结点的不同构的满二叉树的种类数。
//4.Cn可以表示在n*n的格点中从左下角延格线走到右上角且始终不超过对角线的方案数。
//5.Cn可以表示通过连接顶点将n + 2个顶点的凸多边形划分成三角形的方案数。
//6.Cn表示有n个元素的出栈顺序的种类数。
//7.Cn可以用在买票找零钱问题上，对于2n的观众，收银台初始没有钱，无法找零，接下来有n个人拿a元买票，n个人拿2a元买票（需要找零钱数为a），能够保证每一个需要找零的观众来的时候都能够得到找零的合法方案数。
//8.Cn可以表示在二维直角坐标系中，从(0, 0)走到(2n, 0)点，每个相邻整数点的纵坐标差值的绝对值为1，且点始终不会落到x轴下方的方案数。